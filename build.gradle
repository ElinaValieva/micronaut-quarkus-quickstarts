import com.amazonaws.services.lambda.model.InvocationType
import com.amazonaws.services.lambda.model.Runtime
import jp.classmethod.aws.gradle.lambda.*

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0'
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.41"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id 'com.google.cloud.tools.jib' version '2.3.0'
}

version "1.0.0"
group "com.micronaut"


repositories {
    jcenter()
}

configurations {
    developmentOnly
}

dependencies {
    implementation "io.micronaut:micronaut-management"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-function-aws"
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spekVersion") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
}

test.classpath += configurations.developmentOnly
mainClassName = "com.micronaut.Application"

test {
    useJUnitPlatform()
}

apply plugin: "com.google.cloud.tools.appengine-appyaml"

appengine {
    stage.artifact =
            "${buildDir}/libs/${project.name}-${project.version}.jar"

    /**
     *  stopPreviousVersion = true  -  default - stop the current version
     *  promote = true              - default - & make this the current version
     *
     */
    deploy {
        stopPreviousVersion = true
        promote = true
        projectId = GCLOUD_CONFIG
        version = GCLOUD_CONFIG
    }

}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

jib {
    to {
        image = 'elvaliev/micronaut-quickstart'
        auth {
            username = DOCKERHUB_USERNAME
            password = DOCKERHUB_PASSWORD
        }
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.micronaut.Application'
        )
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

if (project.hasProperty("enableAws") && project.property("enableAws") == "true") {

    apply plugin: 'jp.classmethod.aws.lambda'
    apply plugin: "base"
    apply plugin: "java"

    aws {
        profileName = "default"
        region = AWS_REGION
    }

    lambda {
        region = AWS_REGION
    }

    task zip(type: Zip) {
        from "function/"
        destinationDir file("build")
    }

    mainClassName = "io.micronaut.function.executor.FunctionApplication"

    task deploy(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
        functionName = "hello-micronaut"
        handler = "io.micronaut.function.aws.MicronautRequestStreamHandler"
        role = AWS_ROLE
        runtime = Runtime.Java8
        zipFile = shadowJar.archivePath
        memorySize = 256
        timeout = 60
    }


    task invoke(type: AWSLambdaInvokeTask) {
        functionName = "hello-micronaut"
        invocationType = InvocationType.RequestResponse
        payload = ''
        doLast {
            println "Lambda function result: " + new String(invokeResult.payload.array())
        }
    }

    task deleteFunction(type: AWSLambdaDeleteFunctionTask) {
        functionName = "hello-micronaut"
    }

    task publishVersionFunction(type: AWSLambdaPublishVersionTask, dependsOn: deploy) {
        functionName = "hello-micronaut"
    }

    task createAlias(type: AWSLambdaCreateAliasTask, dependsOn: publishVersionFunction) {
        functionName = "hello-micronaut"
        aliasName = "alias"
        functionVersion = "1"
    }

    task updateAlias(type: AWSLambdaUpdateAliasTask, dependsOn: createAlias) {
        functionName = "hello-micronaut"
        aliasName = "alias"
        functionVersion = "1"
        routingConfig(({
            additionalVersionWeight = 0.7
            useNextVersion = true
        } as Closure<RoutingConfig>))
    }
}

/**
 * Custom plugin for Kubernetes and OpenShift deployment
 * @see 'plugin/kubernetes.gradle'
 *
 * Prerequisites: kubernetes/openshift extentions
 */
apply from: 'plugin/kubernetes.gradle'

kubernetes {
    path = 'k8s/kubernetes.yml'
    image = 'elvaliev/micronaut-quickstart'
    name = 'micronaut-quickstart'
    port = 8090
}

openshift {
    path = 'k8s/openshift.yml'
    name = 'micronaut-quickstart'
    image = 'elvaliev/micronaut-quickstart'
}