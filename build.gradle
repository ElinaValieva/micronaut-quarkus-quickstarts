import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id 'com.google.cloud.tools.jib' version '2.3.0'
}

version "1.0.0"
group "com.micronaut"


repositories {
    jcenter()
}

configurations {
    developmentOnly
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut.aws:micronaut-function-aws-api-proxy"
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spekVersion") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
}

test.classpath += configurations.developmentOnly
mainClassName = "com.micronaut.Application"

test {
    useJUnitPlatform()
}

apply plugin: "com.google.cloud.tools.appengine-appyaml"

appengine {
    stage.artifact =
            "${buildDir}/libs/${project.name}-${project.version}.jar"

    /**
     *  stopPreviousVersion = true  -  default - stop the current version
     *  promote = true              - default - & make this the current version
     *
     */
    deploy {
        stopPreviousVersion = true
        promote = true
        projectId = GCLOUD_CONFIG
        version = GCLOUD_CONFIG
    }

}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

jib {
    to {
        image = 'elvaliev/micronaut-quickstart'
        auth {
            username = DOCKERHUB_USERNAME
            password = DOCKERHUB_PASSWORD
        }
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.micronaut.Application'
        )
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

tasks.register('deployOpenshift') {
    group = 'deployment'
    description = 'OpenShift Deployment'

    doLast {
        exec {
            workingDir('src/main/openshift')
            if (Os.isFamily(Os.FAMILY_WINDOWS))
                commandLine 'cmd', '/c', 'create.bat'
            else
                commandLine './create'
        }
    }
}

tasks.register('redeployOpenshift') {
    group = 'deployment'
    description = 'OpenShift Redeployment'

    doLast {
        exec {
            workingDir('src/main/openshift')
            if (Os.isFamily(Os.FAMILY_WINDOWS))
                commandLine 'cmd', '/c', 'deploy.bat'
            else
                commandLine './deploy'
        }
    }
}

tasks.register('deployKubernetes') {
    group = 'deployment'
    description = 'Kubernates Deployment'

    doLast {
        exec {
            workingDir('src/main/kubernetes')
            if (Os.isFamily(Os.FAMILY_WINDOWS))
                commandLine 'cmd', '/c', 'create.bat'
            else
                commandLine './create'
        }
    }
}

tasks.register('redeployKubernates') {
    group = 'deployment'
    description = 'Kubernates Redeployment'

    doLast {
        exec {
            workingDir('src/main/kubernetes')
            if (Os.isFamily(Os.FAMILY_WINDOWS))
                commandLine 'cmd', '/c', 'deploy.bat'
            else
                commandLine './deploy'
        }
    }
}