buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0'
        classpath 'com.elvaliev:k8s_aws_plugin:2.0.0'
    }
}

plugins {
    id 'java'
    id 'io.quarkus' version "${quarkusPluginVersion}"
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id "com.elvaliev.k8s_aws_plugin" version "1.0.3"
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-container-image-docker'
    implementation 'io.quarkus:quarkus-amazon-lambda-http'
    implementation 'io.quarkus:quarkus-kubernetes'
    implementation 'io.quarkus:quarkus-config-yaml'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

group 'org.quarkus'
version '1.0.0'

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
apply plugin: "com.google.cloud.tools.appengine-appyaml"

appengine {
    stage.artifact =
            "${buildDir}/libs/${project.name}-${project.version}.jar"

    /**
     *  stopPreviousVersion = true  -  default - stop the current version
     *  promote = true              - default - & make this the current version
     *
     */
    deploy {
        stopPreviousVersion = true
        promote = true
        projectId = GCLOUD_CONFIG
        version = GCLOUD_CONFIG
    }
}

/**
 * Custom plugin for Kubernetes and OpenShift deployment
 * @see 'k8s_aws_plugin'
 *
 * Prerequisites: kubernetes/openshift extentions
 */
kubernetes {
    image = 'elvaliev/quarkus-quickstart'
}

openshift {
    image = 'elvaliev/quarkus-quickstart'
}

if (project.hasProperty("enableAws") && project.property("enableAws") == "true") {
    aws {
        template = file("${project.buildDir}\\sam.jvm.yaml")
        bucket = AWS_BUCKET_NAME
        stack = AWS_STACK_NAME
    }
} else {
    configurations {
        runtime.exclude group: 'io.quarkus', module: 'quarkus-amazon-lambda-http'
    }
}